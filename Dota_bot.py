import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
)

# üîπ –¢–≤–æ–π —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = "7729441906:AAG0dvJAK3uhPWFNPp6sIFUjVo0w0mjVG60"
HOST_ID = 1373194812  # üî• –£–∫–∞–∂–∏ –∑–¥–µ—Å—å —Å–≤–æ–π Telegram ID, —á—Ç–æ–±—ã —Ç—ã –±—ã–ª –∞–¥–º–∏–Ω–æ–º

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# üîπ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–∞—è, –ª—É—á—à–µ –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_data = {}

# üîπ –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
chat_history = {}

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    KeyboardButton("üéØ –ü–æ–¥–±–æ—Ä –≥–µ—Ä–æ—è"),
    KeyboardButton("üí¨ –ß–∞—Ç —Å –ò–ò")
)

# üîπ –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats_menu = InlineKeyboardMarkup()
stats_menu.add(
    InlineKeyboardButton("üî• –¢–æ–ø-5 –ª—É—á—à–∏—Ö –≥–µ—Ä–æ–µ–≤", callback_data="top_5"),
    InlineKeyboardButton("üíÄ –¢–æ–ø-5 —Ö—É–¥—à–∏—Ö –≥–µ—Ä–æ–µ–≤", callback_data="worst_5"),
)
stats_menu.add(InlineKeyboardButton("üìå –¢–µ–∫—É—â–∞—è –º–µ—Ç–∞", callback_data="meta"))

# üîπ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å Dota 2. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# üîπ –ó–∞–ø—Ä–æ—Å Steam ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def ask_steam_id(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π **Steam ID** –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ Steam ID –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
@dp.message_handler(lambda message: message.text.isdigit())
async def save_steam_id(message: types.Message):
    steam_id = message.text
    user_data[message.from_user.id] = {"steam_id": steam_id}
    await message.answer("Steam ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:", reply_markup=stats_menu)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å OpenDota
def get_dota_stats(steam_id):
    url = f"https://api.opendota.com/api/players/{steam_id}/heroes"
    response = requests.get(url)
    if response.status_code != 200:
        return None
    return response.json()

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –º–µ—Ç—ã —Å OpenDota API
def get_meta_heroes_by_role(role="carry"):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø-10 –≥–µ—Ä–æ–µ–≤ —Å –ª—É—á—à–∏–º –≤–∏–Ω—Ä–µ–π—Ç–æ–º –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ä–æ–ª–∏
    :param role: –†–æ–ª—å –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≥–µ—Ä–æ–µ–≤
    :return: –°–ø–∏—Å–æ–∫ —Ç–æ–ø-10 –≥–µ—Ä–æ–µ–≤ —Å –ª—É—á—à–∏–º –≤–∏–Ω—Ä–µ–π—Ç–æ–º –¥–ª—è —ç—Ç–æ–π —Ä–æ–ª–∏
    """
    url = f"https://api.opendota.com/api/heroes"
    response = requests.get(url)

    if response.status_code != 200:
        return None

    heroes_data = response.json()

    top_heroes = []
    
    for hero in heroes_data:
        winrate = hero.get("winrate", 0)
        games = hero.get("games", 0)

        if games > 50:  # –ú–∏–Ω–∏–º—É–º 50 –∏–≥—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            top_heroes.append({"name": hero["localized_name"], "winrate": winrate})

    top_heroes_sorted = sorted(top_heroes, key=lambda x: x["winrate"], reverse=True)[:10]

    return top_heroes_sorted


# üîπ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–≤–æ–¥ –º–µ—Ç—ã –ø–æ —Ä–æ–ª—è–º
@dp.callback_query_handler(lambda call: call.data == "meta")
async def meta_role(call: types.CallbackQuery):
    user_id = call.from_user.id
    if user_id not in user_data:
        await call.message.answer("–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª Steam ID! –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
        return

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await call.message.answer("–£–∫–∞–∂–∏ –ø–æ–∑–∏—Ü–∏—é: carry, offlane, mid, support –∏–ª–∏ any?")
    
    # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await dp.register_message_handler(get_meta_for_role, state="waiting_for_position")


async def get_meta_for_role(message: types.Message):
    position = message.text.lower()
    
    if position not in ["carry", "offlane", "mid", "support", "any"]:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: carry, offlane, mid, support –∏–ª–∏ any.")
        return
    
    meta_heroes = get_meta_heroes_by_role(position)
    
    if meta_heroes:
        result = f"üìå **–¢–µ–∫—É—â–∞—è –º–µ—Ç–∞ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ {position}:**\n"
        for hero in meta_heroes:
            result += f"{hero['name']} ‚Äì {hero['winrate']}% WR\n"
        await message.answer(result)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(lambda call: call.data in ["top_5", "worst_5", "meta"])
async def handle_stats_buttons(call: types.CallbackQuery):
    user_id = call.from_user.id
    if user_id not in user_data:
        await call.message.answer("–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª Steam ID! –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
        return

    steam_id = user_data[user_id]["steam_id"]
    stats = get_dota_stats(steam_id)
    if not stats:
        await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    if call.data == "top_5":
        top_5 = sorted(stats, key=lambda x: x['win'] / x['games'], reverse=True)[:5]
        result = "\n".join([f"{hero['hero_id']} ‚Äì {hero['win']}/{hero['games']} –ø–æ–±–µ–¥" for hero in top_5])
        await call.message.answer(f"üî• **–¢–æ–ø-5 –ª—É—á—à–∏—Ö –≥–µ—Ä–æ–µ–≤:**\n{result}")

    elif call.data == "worst_5":
        worst_5 = sorted(stats, key=lambda x: x['win'] / x['games'])[:5]
        result = "\n".join([f"{hero['hero_id']} ‚Äì {hero['win']}/{hero['games']} –ø–æ–±–µ–¥" for hero in worst_5])
        await call.message.answer(f"üíÄ **–¢–æ–ø-5 —Ö—É–¥—à–∏—Ö –≥–µ—Ä–æ–µ–≤:**\n{result}")

    elif call.data == "meta":
        meta_heroes = get_meta_heroes_by_role("any")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∂–µ–º –º–µ—Ç—É –¥–ª—è –ª—é–±–æ–π —Ä–æ–ª–∏
        result = "\n".join([f"{hero['name']} ‚Äì {hero['winrate']}% WR" for hero in meta_heroes])
        await call.message.answer(f"üìå **–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –º–µ—Ç–∞:**\n{result}")

# üîπ –ß–∞—Ç —Å –ò–ò —á–µ—Ä–µ–∑ DeepSeek
@dp.message_handler(lambda message: message.text == "üí¨ –ß–∞—Ç —Å –ò–ò")
async def chat_with_ai(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –ò–ò.")

@dp.message_handler()
async def ai_response(message: types.Message):
    user_id = message.from_user.id
    chat_history.setdefault(user_id, []).append(message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤
    response = deepseek_chat(message.text)
    await message.answer(response)

# üîπ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å DeepSeek API
def deepseek_chat(text):
    return f"ü§ñ [–ò–ò]: –ò–∑–≤–∏–Ω–∏, –Ω–æ —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å."

# üîπ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ö–æ—Å—Ç–∞ ‚Äì –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —á–∞—Ç–æ–≤
@dp.message_handler(commands=['all_chats'])
async def get_all_chats(message: types.Message):
    if message.from_user.id != HOST_ID:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Ç–æ–≤!")
        return

    if not chat_history:
        await message.answer("üí¨ –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞.")
        return

    response = "üìú **–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:**\n\n"
    for user_id, messages in chat_history.items():
        response += f"üë§ {user_id}:\n" + "\n".join(messages[-5:]) + "\n\n"
    
    await message.answer(response)

# üîπ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ö–æ—Å—Ç–∞ ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(commands=['send'])
async def send_message_to_user(message: types.Message):
    if message.from_user.id != HOST_ID:
        await message.answer("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π!")
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: `/send <user_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>`")
        return

    user_id, text = parts[1], parts[2]

    try:
        user_id = int(user_id)
        # –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await bot.send_message(user_id, f"ü§ñ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞:\n{text}")
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


import asyncio

inactive_time = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
last_activity = None

async def shutdown_if_inactive():
    global last_activity
    while True:
        await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        if last_activity and (asyncio.get_event_loop().time() - last_activity > inactive_time):
            print("üí§ –ë–æ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 30 –º–∏–Ω—É—Ç. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
            exit(0)

@dp.message_handler()
async def handle_activity(message: types.Message):
    global last_activity
    last_activity = asyncio.get_event_loop().time()
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è...

    
# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
