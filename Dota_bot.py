import asyncio
import os
import time
import requests
import google.generativeai as genai
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º API-–∫–ª—é—á–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
OPENDOTA_API_KEY = os.getenv("OPENDOTA_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Gemini API
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-pro")

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞ (–¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏—è)
active_users = {}
INACTIVITY_LIMIT = 1800  # 30 –º–∏–Ω—É—Ç


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def check_activity():
    while True:
        current_time = time.time()
        for user_id in list(active_users.keys()):
            if current_time - active_users[user_id] > INACTIVITY_LIMIT:
                await bot.send_message(user_id, "–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, —á—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ.")
                del active_users[user_id]
        await asyncio.sleep(60)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è"), KeyboardButton("üéÆ –ü–æ–º–æ—â—å —Å –ø–∏–∫–æ–º"))
    return keyboard


# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Ñ–∏–ª–µ —á–µ—Ä–µ–∑ OpenDota API
def get_player_data(steam_id):
    url = f"https://api.opendota.com/api/players/{steam_id}?api_key={OPENDOTA_API_KEY}"
    response = requests.get(url)
    if response.status_code == 200:
        return response.json()
    return None


# –ê–Ω–∞–ª–∏–∑ –≤–∏–Ω—Ä–µ–π—Ç–∞ –≥–µ—Ä–æ–µ–≤
def get_winrate_heroes(steam_id, top=True):
    url = f"https://api.opendota.com/api/players/{steam_id}/heroes?api_key={OPENDOTA_API_KEY}"
    response = requests.get(url)
    if response.status_code == 200:
        heroes = response.json()
        sorted_heroes = sorted(heroes, key=lambda x: x["win"] / x["games"], reverse=top)
        return sorted_heroes[:5]
    return None


# –§—É–Ω–∫—Ü–∏—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Google Gemini API
def ask_gemini(prompt):
    response = model.generate_content(prompt)
    return response.text


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    active_users[user_id] = time.time()
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø Dota 2 –±–æ—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=main_menu())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentType.TEXT)
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    active_users[user_id] = time.time()

    user_text = message.text.lower()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Google Gemini
    response = ask_gemini(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: {user_text}. –ö–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –µ–º—É –Ω—É–∂–Ω–∞?")

    if "–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è" in response:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Steam ID:")
    elif "–ø–æ–º–æ—â—å —Å –ø–∏–∫–æ–º" in response:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥–µ—Ä–æ–µ–≤ –∏ –≤–∞—à—É —Ä–æ–ª—å:")
    elif "–ª—É—á—à–∏–µ –≥–µ—Ä–æ–∏" in response:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Steam ID, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å 5 –ª—É—á—à–∏—Ö –≥–µ—Ä–æ–µ–≤ –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É.")
    elif "—Ö—É–¥—à–∏–µ –≥–µ—Ä–æ–∏" in response:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Steam ID, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å 5 —Ö—É–¥—à–∏—Ö –≥–µ—Ä–æ–µ–≤ –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É.")
    elif "—Ç–µ–∫—É—â–∞—è –º–µ—Ç–∞" in response:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é, –∏ —è –ø–æ–∫–∞–∂—É 10 –ª—É—á—à–∏—Ö –≥–µ—Ä–æ–µ–≤ –Ω–∞ –Ω–µ–π.")
    else:
        await message.answer("–ù–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async def on_startup(dp):
    asyncio.create_task(check_activity())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)
