import os
import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
)
from dotenv import load_dotenv

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")  # Telegram Bot Token
OPENDOTA_API_KEY = os.getenv("OPENDOTA_API_KEY")  # OpenDota API Key (–µ—Å–ª–∏ –µ—Å—Ç—å)
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")  # DeepSeek API Key (–µ—Å–ª–∏ –µ—Å—Ç—å)
HOST_ID = int(os.getenv("HOST_ID", "1373194812"))  # ID –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞

if not TOKEN:
    raise ValueError("‚ö†Ô∏è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# üîπ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ä–µ–º–µ–Ω–Ω–∞—è, –ª—É—á—à–µ –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_data = {}
chat_history = {}

# üîπ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    KeyboardButton("üéØ –ü–æ–¥–±–æ—Ä –≥–µ—Ä–æ—è"),
    KeyboardButton("üí¨ –ß–∞—Ç —Å –ò–ò")
)

# üîπ –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats_menu = InlineKeyboardMarkup()
stats_menu.add(
    InlineKeyboardButton("üî• –¢–æ–ø-5 –ª—É—á—à–∏—Ö –≥–µ—Ä–æ–µ–≤", callback_data="top_5"),
    InlineKeyboardButton("üíÄ –¢–æ–ø-5 —Ö—É–¥—à–∏—Ö –≥–µ—Ä–æ–µ–≤", callback_data="worst_5"),
)
stats_menu.add(InlineKeyboardButton("üìå –¢–µ–∫—É—â–∞—è –º–µ—Ç–∞", callback_data="meta"))

# üîπ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å Dota 2. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

# üîπ –ó–∞–ø—Ä–æ—Å Steam ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def ask_steam_id(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π **Steam ID** –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å —Ç–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ Steam ID
@dp.message_handler(lambda message: message.text.isdigit())
async def save_steam_id(message: types.Message):
    steam_id = message.text
    user_data[message.from_user.id] = {"steam_id": steam_id}
    await message.answer("Steam ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:", reply_markup=stats_menu)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å OpenDota
def get_dota_stats(steam_id):
    url = f"https://api.opendota.com/api/players/{steam_id}/heroes"
    headers = {"Authorization": f"Bearer {OPENDOTA_API_KEY}"} if OPENDOTA_API_KEY else {}
    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        return None
    return response.json()

# üîπ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (—Ç–æ–ø-5 –ª—É—á—à–∏—Ö –∏ —Ö—É–¥—à–∏—Ö –≥–µ—Ä–æ–µ–≤)
@dp.callback_query_handler(lambda call: call.data in ["top_5", "worst_5"])
async def handle_stats_buttons(call: types.CallbackQuery):
    user_id = call.from_user.id
    if user_id not in user_data:
        await call.message.answer("–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª Steam ID! –û—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å–Ω–∞—á–∞–ª–∞.")
        return

    steam_id = user_data[user_id]["steam_id"]
    stats = get_dota_stats(steam_id)
    if not stats:
        await call.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    if call.data == "top_5":
        top_5 = sorted(stats, key=lambda x: x['win'] / x['games'], reverse=True)[:5]
        result = "\n".join([f"{hero['hero_id']} ‚Äì {hero['win']}/{hero['games']} –ø–æ–±–µ–¥" for hero in top_5])
        await call.message.answer(f"üî• **–¢–æ–ø-5 –ª—É—á—à–∏—Ö –≥–µ—Ä–æ–µ–≤:**\n{result}")

    elif call.data == "worst_5":
        worst_5 = sorted(stats, key=lambda x: x['win'] / x['games'])[:5]
        result = "\n".join([f"{hero['hero_id']} ‚Äì {hero['win']}/{hero['games']} –ø–æ–±–µ–¥" for hero in worst_5])
        await call.message.answer(f"üíÄ **–¢–æ–ø-5 —Ö—É–¥—à–∏—Ö –≥–µ—Ä–æ–µ–≤:**\n{result}")

# üîπ –ß–∞—Ç —Å –ò–ò —á–µ—Ä–µ–∑ DeepSeek API
def deepseek_chat(text):
    if not DEEPSEEK_API_KEY:
        return "ü§ñ [–ò–ò]: API-–∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ DeepSeek API –¥–ª—è —Ä–∞–±–æ—Ç—ã –ò–ò."

    url = "https://api.deepseek.com/chat"
    headers = {"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"}
    data = {"prompt": text}

    response = requests.post(url, json=data, headers=headers)
    if response.status_code != 200:
        return "ü§ñ [–ò–ò]: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
    
    return response.json().get("response", "ü§ñ [–ò–ò]: –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞.")

@dp.message_handler(lambda message: message.text == "üí¨ –ß–∞—Ç —Å –ò–ò")
async def chat_with_ai(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –æ—Ç–≤–µ—Ç–∏—Ç—å –∫–∞–∫ –ò–ò.")

@dp.message_handler()
async def ai_response(message: types.Message):
    user_id = message.from_user.id
    chat_history.setdefault(user_id, []).append(message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤
    response = deepseek_chat(message.text)
    await message.answer(response)

# üîπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ 30 –º–∏–Ω—É—Ç
inactive_time = 1800  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
last_activity = None

async def shutdown_if_inactive():
    global last_activity
    while True:
        await asyncio.sleep(300)
        if last_activity and (asyncio.get_event_loop().time() - last_activity > inactive_time):
            print("üí§ –ë–æ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 30 –º–∏–Ω—É—Ç. –ó–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
            exit(0)

@dp.message_handler()
async def handle_activity(message: types.Message):
    global last_activity
    last_activity = asyncio.get_event_loop().time()

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
