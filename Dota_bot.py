import os
import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
)
from dotenv import load_dotenv
from google.generativeai import configure, generate_text  # –ü–æ–¥–∫–ª—é—á–∞–µ–º Gemini API

# üîπ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")  # Telegram Bot Token
OPENDOTA_API_KEY = os.getenv("OPENDOTA_API_KEY")  # OpenDota API Key
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")  # Google Gemini API Key
HOST_ID = int(os.getenv("HOST_ID", "1373194812"))  # ID –∞–¥–º–∏–Ω–∞ –±–æ—Ç–∞

if not TOKEN:
    raise ValueError("‚ö†Ô∏è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot=bot)

# üîπ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
configure(api_key=GEMINI_API_KEY)

def ask_gemini(prompt):
    response = generate_text(prompt=prompt)
    return response.text if response else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏."

# üîπ –ë–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏)
user_data = {}
chat_history = {}

# üîπ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ + –∏–Ω–ª–∞–π–Ω)
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(
    KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    KeyboardButton("üéØ –ü–æ–¥–±–æ—Ä –≥–µ—Ä–æ—è"),
    KeyboardButton("üí¨ –ß–∞—Ç —Å –ò–ò"),
    KeyboardButton("üî• –¢–µ–∫—É—â–∞—è –º–µ—Ç–∞"),
    KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
)
help_menu = InlineKeyboardMarkup()
help_menu.add(
    InlineKeyboardButton("üìå –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥", callback_data="help"),
    InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu")
)

# üîπ –ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
async def shutdown_timer():
    await asyncio.sleep(1800)
    await bot.send_message(HOST_ID, "‚è≥ –ë–æ—Ç –æ—Ç–∫–ª—é—á–∞–µ—Ç—Å—è –∏–∑-–∑–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
    await bot.session.close()
    exit()

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    asyncio.create_task(shutdown_timer())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å Dota 2. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu)

@dp.message_handler(commands=['help'])
async def help_cmd(message: types.Message):
    await message.answer("‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=help_menu)

@dp.callback_query_handler(lambda c: c.data == "help")
async def help_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "‚ÑπÔ∏è –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:", reply_markup=help_menu)

@dp.callback_query_handler(lambda c: c.data == "menu")
async def menu_callback(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu)

# üîπ –ó–∞–ø—Ä–æ—Å Steam ID —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_cmd(message: types.Message):
    await message.answer("üîπ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Steam ID –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º:")

@dp.message_handler(lambda message: message.text.isdigit())
async def save_steam_id(message: types.Message):
    user_data[message.from_user.id] = {"steam_id": message.text}
    await message.answer("‚úÖ –í–∞—à Steam ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

# üîπ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –º–µ—Ç—ã
async def get_meta():
    url = "https://api.opendota.com/api/heroes"
    response = requests.get(url).json()
    if not response:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–µ."
    
    meta_heroes = sorted(response, key=lambda x: x.get('pro_win', 0) / max(1, x.get('pro_pick', 1)), reverse=True)[:10]
    meta_text = "\n".join([f"üî• {hero['localized_name']} - {hero['pro_win']}/{hero['pro_pick']} –∏–≥—Ä" for hero in meta_heroes])
    
    return f"üî• –¢–µ–∫—É—â–∞—è –º–µ—Ç–∞ (–¢–æ–ø 10 –≥–µ—Ä–æ–µ–≤):\n{meta_text}"

@dp.message_handler(lambda message: message.text == "üî• –¢–µ–∫—É—â–∞—è –º–µ—Ç–∞")
async def meta_cmd(message: types.Message):
    meta = await get_meta()
    await message.answer(meta)

# üîπ –ê–Ω–∞–ª–∏–∑ –≤–∏–Ω—Ä–µ–π—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_user_winrates(steam_id):
    url = f"https://api.opendota.com/api/players/{steam_id}/heroes"
    response = requests.get(url).json()
    if not response:
        return "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ—Ä–æ—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    
    best_heroes = sorted(response, key=lambda x: x['win'] / max(1, x['games']), reverse=True)[:5]
    worst_heroes = sorted(response, key=lambda x: x['win'] / max(1, x['games']))[:5]
    
    best_text = "\n".join([f"‚úÖ {hero['hero_id']} - {hero['win']}/{hero['games']} –∏–≥—Ä" for hero in best_heroes])
    worst_text = "\n".join([f"‚ùå {hero['hero_id']} - {hero['win']}/{hero['games']} –∏–≥—Ä" for hero in worst_heroes])
    
    return f"üìä –í–∞—à–∏ –ª—É—á—à–∏–µ –≥–µ—Ä–æ–∏:\n{best_text}\n\nüìâ –í–∞—à–∏ —Ö—É–¥—à–∏–µ –≥–µ—Ä–æ–∏:\n{worst_text}"

@dp.message_handler(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def user_stats_cmd(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_data or "steam_id" not in user_data[user_id]:
        await message.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Steam ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!")
        return
    
    steam_id = user_data[user_id]["steam_id"]
    stats = await get_user_winrates(steam_id)
    await message.answer(stats)

# üîπ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
